#################################################################
#                  GENERAL INFORMATION         
#################################################################

This version of the code is developped based on the ludwig-master. 
The harmonic bond, Lennard-Jones potential (among non-bonded particles),
harmonic angle potential, and dihedral angle potential are included. 


#################################################################
#                           EXAMPLE 
#################################################################

I illustrate how to use the subgrid particle with an example, in which 
10 polymers are sheared in shear flow. It is stored in /data/poly_shear

############

Initial configeration:

The initial configuration is generatad in /util/multi_poly_init.c. It creates
multiple polymers and locates them randomly. Once you finish setting up the 
parameters, you can compile it directly in /util by typing 'make'. Afterwards,
you can type './multi_poly_init' to generate the initial configuration 
'config.cds.init.001-001'. 

In 'config.cds.init.001-001', the top number is the number of particles. In this 
case is 300. Then, every 68 lines correspond to the information of one particle. 
You may find out what each line means in 'colloid.h'.  


############

Input:

You may find an example in /data/polymer_shear/input. Here, the harmonic bond 
potential is used to connected the monomers. To prevent overlapping, a short 
range repulsive surface-surface soft sphere potential is used. In particular, 
'soft_sphere_unbonded 1' means the repulsion is only among non-bonded monomers.

A shear flow is applied in the x direction. It is generated by two parallel walls
in z direction. The wall moving speed can be adjusted to control the shear strength.

############

To run the code, just type 'make'.

############

Output:

After every 500 steps, a configuration is output. It is in the same format as 
'config.cds.init.001-001', but named as, e.g., 'config.cds00000500.001-001'.

############

Visualization:

To visualize, run python code 'extract.py' in the data directory. It will call 
the c code 'extract_colloids' to generate the, e.g., 'col-cds00000500.csv' data. 
The '.csv' files can be read in Paraview. You may control which configurations 
to generate in 'extract.py'. In 'col-cds00000500.csv', particle's position and 
velocity are generated. 

In Paraview, first click 'File->open' and then find the location of '.csv' files to 
open them. Then you type 'Apply'. The files will be read. 

Then click 'Filters -> Alphabetical -> Table to Ponits'. In 'TalbeToPoints', change 
X,Y,Z columns to 'x,y,z', respectively. Then you read the location of each particle. 

Afterwards, click icon 'Glyph' in the top third rows. In 'Glyph', choose 'Glyph' type
to be 'sphere', choose scale array to be 'No scale array'. Set scale factor to be 1. 
Choose Glyph mode to be 'ALl Points'. Then click 'Apply'. Now you can visualize the
structures. 

#################################################################
#                          a_L 
#################################################################

As explained in PhysRevE.77.026709_(2008), we need to estimate the offset parameter a_L 
in order to recover the background flow in the absence of the subgrid particle. To do 
that, we need to put one particle in a periodic simulation box at a finite temperature. 
Then, we turn off the additional noise correction in Eq.B4 and let the particle randomly
move. Note that even though we turn off the additional noise correction, the noise acted 
on the fluid still exists. So the particle will be driven around by the noisy flow. 
Since we don't have additional forces, so the equation of motion of the single particle 
is Eq.B6. After we get the time series, we can measure the a_L through the 
Einstein–Smoluchowski relation.

I will illustrate this process through an example.

The code for a_L estimation is 'vesicle_chemo_v1_aL'. The additonal noise correction 
is turned off in 'subgrid.c' between line 213~235.

An example run is in /data/aL/. Here, a subgrid particle is set in a periodic box at 
temperature T=1e-6. After running many steps, please use 'extract.py' to extract the 
position and velocity of the particle from the 'config.cds00000500.001-001' file. 
Then, please type 'python collect.py' to collect this information from all the '.csv' 
file sequentially and stored it in 'data.dat'. This file can be used to calculate MSD. 
Note that, you can set the initialization percentage in 'collect.py'. In this example, 
ini=0.2. Therefore, 20% of the data will be discarded. Only the left 80% will be used 
for MSD calculation.  

When doing the MSD calculation, you may use 'run_MSD_diff_size.py'. It will call 
'MSD_r_diff_size.cpp' to calculate MSD. A MSD file 'MSD_data.dat' will be generated. 
Then, you can use gnuplot to plot the curve. A script called 'al.gp' can do this job. 
Simply open gnuplot and type "load 'al.gp'". You will see the MSD in log scale. After
fitting, the fitted value for paramter 'A' can be read. a_L can be then estimated from 
A=6D=6*k_BT/(6*\pi*\eta*a_L) (Einstein–Smoluchowski relation). Note that, you need
to have very long runs in order to get decent MSD. Usually, 3~4 million steps are 
necessary.   

#################################################################
#                          subgrid code 
#################################################################

The code for subgrid particle is mainly in 'subgrid.c'.

'subgrid_update' has the equation of motion (EoM) for subgrid particles. It updates 
the position of each particle. 

'subgrid_interpolation' calculates the fluid contribution to the EoM by interpolate 
fluid velocity on each node to the position of the subgrid particle. 

'subgrid_force_from_particles' distribute the total forces acted on subgrid particles 
to the nearby fluid nodes. 

'subgrid_wall_lubrication' accumulates lubrication corrections to the external force 
on each particle. You don't need to worry about it. 
